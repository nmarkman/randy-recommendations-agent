name: üåÄ Randy Recommendation Agent

on:
  # Run daily at 11 AM EST (4 PM UTC)
  schedule:
    - cron: '0 16 * * *'  # 4 PM UTC = 11 AM EST
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if not due'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  send-recommendation:
    runs-on: ubuntu-latest
    
    steps:
    - name: üöÄ Checkout Randy
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üì• Download previous recommendation history
      uses: actions/download-artifact@v4
      continue-on-error: true  # Continue even if this is the first run with no history
      with:
        name: randy-data
        path: data/
        
    - name: üîß Set up environment
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_PLACES_API_KEY: ${{ secrets.GOOGLE_PLACES_API_KEY }}
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        REGION: ${{ secrets.REGION }}
        QUIET_HOURS_START: ${{ secrets.QUIET_HOURS_START }}
        QUIET_HOURS_END: ${{ secrets.QUIET_HOURS_END }}
        RECOMMENDATION_CADENCE_DAYS: ${{ secrets.RECOMMENDATION_CADENCE_DAYS }}
      run: |
        # Create data directory if it doesn't exist
        mkdir -p data
        mkdir -p logs
        # Create empty recommendation history file if it doesn't exist
        if [ ! -f "data/recommendation_history.json" ]; then
          echo "[]" > data/recommendation_history.json
        fi
        # Verify environment setup
        echo "üîç Environment Check:"
        echo "Region: ${REGION:-Charleston, SC}"
        echo "Quiet Hours: ${QUIET_HOURS_START:-23}:00 - ${QUIET_HOURS_END:-7}:00"
        echo "Cadence: ${RECOMMENDATION_CADENCE_DAYS:-7} days"
        echo "Current UTC time: $(date -u)"
        echo "Current EST time: $(TZ=America/New_York date)"
        
    - name: üè• Health Check
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_PLACES_API_KEY: ${{ secrets.GOOGLE_PLACES_API_KEY }}
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        REGION: ${{ secrets.REGION }}
        QUIET_HOURS_START: ${{ secrets.QUIET_HOURS_START }}
        QUIET_HOURS_END: ${{ secrets.QUIET_HOURS_END }}
        RECOMMENDATION_CADENCE_DAYS: ${{ secrets.RECOMMENDATION_CADENCE_DAYS }}
      run: |
        echo "üè• Running health checks..."
        python main.py health
        
    - name: üìä Check Randy Status
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_PLACES_API_KEY: ${{ secrets.GOOGLE_PLACES_API_KEY }}
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        REGION: ${{ secrets.REGION }}
        QUIET_HOURS_START: ${{ secrets.QUIET_HOURS_START }}
        QUIET_HOURS_END: ${{ secrets.QUIET_HOURS_END }}
        RECOMMENDATION_CADENCE_DAYS: ${{ secrets.RECOMMENDATION_CADENCE_DAYS }}
      run: |
        echo "üìä Checking Randy's status..."
        python main.py status
        
    - name: üåÄ Run Randy
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_PLACES_API_KEY: ${{ secrets.GOOGLE_PLACES_API_KEY }}
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        REGION: ${{ secrets.REGION }}
        QUIET_HOURS_START: ${{ secrets.QUIET_HOURS_START }}
        QUIET_HOURS_END: ${{ secrets.QUIET_HOURS_END }}
        RECOMMENDATION_CADENCE_DAYS: ${{ secrets.RECOMMENDATION_CADENCE_DAYS }}
      run: |
        echo "üåÄ Starting Randy..."
        
        # Determine if we should force run
        if [[ "${{ github.event.inputs.force_run }}" == "true" ]]; then
          echo "üöÄ Force running Randy (manual trigger)"
          python main.py force
        else
          echo "‚è∞ Running Randy with normal scheduling"
          python main.py
        fi
        
    - name: üìã Upload Logs
      uses: actions/upload-artifact@v4
      if: always()  # Always upload logs, even if Randy fails
      with:
        name: randy-logs-${{ github.run_number }}
        path: |
          data/randy.log
          logs/
        retention-days: 30
        
    - name: üì§ Save recommendation history
      uses: actions/upload-artifact@v4
      if: always()  # Always upload data, even if Randy fails
      with:
        name: randy-data
        path: data/*.json
        retention-days: 90  # Keep history for 90 days
        
    - name: üìà Summary
      if: always()
      run: |
        echo "üéØ Randy Execution Summary:"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run number: ${{ github.run_number }}"
        echo "Trigger: ${{ github.event_name }}"
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Manual trigger - Force run: ${{ github.event.inputs.force_run }}"
        fi
        echo "Time: $(date -u) UTC"
        echo "Status: ${{ job.status }}"
        
        # Show last few lines of Randy's log if it exists
        if [ -f "data/randy.log" ]; then
          echo ""
          echo "üìù Last 10 lines of Randy's log:"
          tail -n 10 data/randy.log
        fi 